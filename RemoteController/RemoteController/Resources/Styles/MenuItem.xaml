<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/RemoteController;component/Resources/Generic/All.xaml" />
        <ResourceDictionary Source="pack://application:,,,/RemoteController;component/Resources/Styles/Separator.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="MenuItem.Template" TargetType="MenuItem">
        <Grid>
            <Border 
                x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                        <ColumnDefinition x:Name="Col3" Width="14"/>
                    </Grid.ColumnDefinitions>

                    <!-- ContentPresenter to show an Icon if needed -->
                    <ContentPresenter 
                        x:Name="Icon" 
                        Grid.Column="0" 
                        Margin="4,0,6,0" 
                        Height="20"
                        Width="20"
                        VerticalAlignment="Center" 
                        ContentSource="Icon"/>

                    <!-- Glyph is a checkmark if needed for a checkable menu -->
                    <Grid 
                        x:Name="GlyphPanel"
                        Grid.Column="0" 
                        Visibility="Hidden"
                        Margin="4,0,6,0"
                        VerticalAlignment="Center">
                        <Path 
                            x:Name="GlyphPanelpath" 
                            VerticalAlignment="Center" 
                            Fill="{TemplateBinding Foreground}"
                            Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                            FlowDirection="LeftToRight"/>
                    </Grid>

                    <!-- Content for the menu text etc -->
                    <ContentPresenter 
                        Grid.Column="1"
                        Margin="{TemplateBinding Padding}"
                        x:Name="HeaderHost"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        RecognizesAccessKey="True"
                        ContentSource="Header"/>

                    <!-- Content for the menu IGT -->
                    <ContentPresenter 
                        x:Name="IGTHost"
                        Grid.Column="2"
                        Margin="8,1,8,1"
                        ContentSource="InputGestureText"
                        VerticalAlignment="Center"/>

                    <!-- Arrow drawn path which points to the next level of the menu -->
                    <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                        <Path 
                            x:Name="ArrowPanelPath" 
                            HorizontalAlignment="Right" 
                            VerticalAlignment="Center" 
                            Fill="{TemplateBinding Foreground}"
                            Data="M0,0 L0,8 L4,4 z"/>
                    </Grid>

                </Grid>
            </Border>
            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
            <Popup
                x:Name="SubMenuPopup" 
                IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                
                Placement="Right" 
                Focusable="false" 
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <Border 
                    x:Name="SubMenuBorder" 
                    Background="{StaticResource Brush.Grey.3}"
                    BorderBrush="{StaticResource Brush.Grey.8}"
                    BorderThickness="1" 
                    SnapsToDevicePixels="True"
                    Padding="0">
                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                        <StackPanel 
                            IsItemsHost="True" 
                            KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Grid>
                </Border>
            </Popup>
        </Grid>

        <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
        <ControlTemplate.Triggers>
            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="6 1"/>
                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>

            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="6 1"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>

            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
            </Trigger>

            <!-- Role = SubMenuItem : this is a child menu item which has children-->
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
            </Trigger>

            <!-- If no Icon is present the we collapse the Icon Content -->
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </Trigger>

            <!-- The GlyphPanel contains the CheckMark -->
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </Trigger>
            <!-- Using the system colors for the Menu Highlight and IsEnabled-->
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" Value="{StaticResource Brush.Grey.2C}" TargetName="Border"/>
                <Setter TargetName="ArrowPanelPath" Property="Fill" Value="{DynamicResource StyledWindow.Brushes.Active}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Grey.2}" TargetName="Border"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelHeader" />
                    <Condition Property="IsSubmenuOpen" Value="True" />
                </MultiTrigger.Conditions>

                <Setter Property="Padding" Value="6 0 6 1" />
                <Setter Property="BorderThickness" Value="1 1 1 0" />
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Grey.8}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelItem" />
                    <Condition Property="IsHighlighted" Value="True" />
                </MultiTrigger.Conditions>

                <Setter Property="Background" Value="{StaticResource Brush.Grey.37}" TargetName="Border"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelHeader" />
                    <Condition Property="IsHighlighted" Value="True" />
                </MultiTrigger.Conditions>

                <Setter Property="Background" Value="{StaticResource Brush.Grey.37}" TargetName="Border"/>
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Brush.Grey.DE}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MenuItem.Default" TargetType="MenuItem">
        <Setter Property="FontFamily" Value="{StaticResource Font.Family.Default}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Grey.EC}"/>
        <Setter Property="Template" Value="{StaticResource MenuItem.Template}" />
        <Style.Resources>
            <Style TargetType="Separator" BasedOn="{StaticResource Separator.Horizontal}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Background" Value="{StaticResource Brush.Grey.8}" />
            </Style>
        </Style.Resources>
    </Style>
    <Style TargetType="MenuItem" BasedOn="{StaticResource MenuItem.Default}" />
</ResourceDictionary>